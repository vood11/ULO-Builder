name: ULO Autobuilder v2 (Efficient Upload)

on:
  workflow_dispatch:
    inputs:
      rootfs_size:
        description: 'Ukuran ROOTFS, minimal 640 (756, 1024, 2048, dll)'
        required: true
        default: '1024'
        type: string
      fwinfo:
        description: 'Informasi Firmware'
        required: true
        default: 'catatan rilis'
        type: string

jobs:
  # JOB 1: Membuat Draf Rilis terlebih dahulu
  create_release:
    name: 1. Create Draft Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_tag: ${{ steps.get_date.outputs.release_tag }}
    steps:
      - name: Dapatkan Tanggal dan Buat Tag
        id: get_date
        run: |
          export TZ="Asia/Jakarta"
          bulan=$(date +%B)
          tanggal=$(date +%d)
          tahun=$(date +%Y)
          echo "release_tag=ULO-RELEASE_${bulan}-${tanggal}-${tahun}" >> $GITHUB_OUTPUT

      - name: Create Draft Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_date.outputs.release_tag }}
          release_name: "Rilis ULO Autobuild | ${{ steps.get_date.outputs.release_tag }}"
          body: |
            ## Rilis OpenWrt untuk Berbagai Perangkat SBC dan STB
            Firmware ini dibuild menggunakan Github Actions
            ### Informasi Firmware OpenWrt
            - Ukuran ROOTFS: ${{ inputs.rootfs_size }}
            - Informasi Firmware: ${{ inputs.fwinfo }}
          draft: true
          prerelease: false

  # JOB 2: Membangun semua firmware secara paralel dan langsung mengunggahnya
  build_and_upload:
    name: 2. Build and Upload Firmware
    needs: create_release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        config:
          - { device: s905x, kernel: '6.1.66-DBAI' }
          - { device: s905x, kernel: '4.9.337' }
          - { device: s905x2, kernel: '6.1.66-DBAI' }
          - { device: s905x2, kernel: '5.4.279' }
          - { device: s905x2, kernel: '4.9.337' }
          - { device: rk3588s-orangepi-5, kernel: '5.10.160-rk35v-dbai' }
          - { device: h618-orangepi-zero3, kernel: '6.1.104-AW64-DBAI' }
          - { device: h618-orangepi-zero3, kernel: '6.1.31-AW64-DBAI' }
          - { device: a64-bananapi-m64, kernel: '6.1.104-AW64-DBAI' }
          - { device: a64-bananapi-m64, kernel: '6.1.31-AW64-DBAI' }
          - { device: a64-nanopi-a64, kernel: '6.1.104-AW64-DBAI' }
          - { device: a64-nanopi-a64, kernel: '6.1.31-AW64-DBAI' }
          - { device: h313-x96q-lpddr3, kernel: '6.1.104-AW64-DBAI' }
          - { device: h313-x96q-lpddr3, kernel: '6.1.31-AW64-DBAI' }
          - { device: h5-orangepi-pc2, kernel: '6.1.104-AW64-DBAI' }
          - { device: h5-orangepi-pc2, kernel: '6.1.31-AW64-DBAI' }
          - { device: h5-orangepi-prime, kernel: '6.1.104-AW64-DBAI' }
          - { device: h5-orangepi-prime, kernel: '6.1.31-AW64-DBAI' }
          - { device: h5-orangepi-zeroplus, kernel: '6.1.104-AW64-DBAI' }
          - { device: h5-orangepi-zeroplus, kernel: '6.1.31-AW64-DBAI' }
          - { device: h5-orangepi-zeroplus2, kernel: '6.1.104-AW64-DBAI' }
          - { device: h5-orangepi-zeroplus2, kernel: '6.1.31-AW64-DBAI' }
          - { device: h6-orangepi-1plus, kernel: '6.1.104-AW64-DBAI' }
          - { device: h6-orangepi-1plus, kernel: '6.1.31-AW64-DBAI' }
          - { device: h6-orangepi-3, kernel: '6.1.104-AW64-DBAI' }
          - { device: h6-orangepi-3, kernel: '6.1.31-AW64-DBAI' }
          - { device: h6-orangepi-3lts, kernel: '6.1.104-AW64-DBAI' }
          - { device: h6-orangepi-3lts, kernel: '6.1.31-AW64-DBAI' }
          - { device: h6-orangepi-lite2, kernel: '6.1.104-AW64-DBAI' }
          - { device: h6-orangepi-lite2, kernel: '6.1.31-AW64-DBAI' }
          - { device: h6-tanix-tx6, kernel: '6.1.104-AW64-DBAI' }
          - { device: h6-tanix-tx6, kernel: '6.1.31-AW64-DBAI' }
          - { device: h616-orangepi-zero2, kernel: '6.1.104-AW64-DBAI' }
          - { device: h616-orangepi-zero2, kernel: '6.1.31-AW64-DBAI' }
          - { device: h616-x96-mate, kernel: '6.1.104-AW64-DBAI' }
          - { device: h616-x96-mate, kernel: '6.1.31-AW64-DBAI' }
          - { device: h618-orangepi-zero2w, kernel: '6.1.104-AW64-DBAI' }
          - { device: h618-orangepi-zero2w, kernel: '6.1.31-AW64-DBAI' }
          - { device: rk3566-orangepi-3b, kernel: '5.10.160-rk35v-dbai' }
          - { device: rk3588-orangepi-5-max, kernel: '5.10.160-rk35v-dbai' }
          - { device: rk3588-orangepi-5-plus, kernel: '5.10.160-rk35v-dbai' }
          - { device: s905x3, kernel: '6.1.66-DBAI' }
          - { device: s905x4, kernel: '6.1.66-DBAI' }
          - { device: s905x4, kernel: '5.4.279' }
        rootfs:
          - 'ImmortalWrt-21.02.7-DBAI-armvirt-rootfs.tar.gz'
          - 'OpenWrt-23.05.4-A2OS-armsr-armv8-generic-rootfs.tar.gz'
    steps:
      - name: Pembersihan dan Instalasi Prasyarat
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get update
          sudo -E apt-get -y install jq lolcat build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev rsync unzip zlib1g-dev file wget aria2
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean

      - name: Checkout Repositori
        uses: actions/checkout@v4

      - name: Cache repositori ULO
        uses: actions/cache@v4
        with:
          path: |
            core/
            rootfs/
            device/
          key: ${{ runner.os }}-ulo-repo-${{ hashFiles('ulo') }}

      - name: Patching ULO
        run: |
          mv ./.github/workflows/ULO_Workflow.patch ./ULO_Workflow.patch
          patch -p1 < ./ULO_Workflow.patch

      - name: Membangun OpenWrt
        run: |
          sudo ./ulo -y -m ${{ matrix.config.device }} -r ${{ matrix.rootfs }} -k ${{ matrix.config.kernel }} -s ${{ inputs.rootfs_size }}
          if [ $? -ne 0 ]; then
            echo "Error: Build gagal, perintah ulo keluar dengan kode error"
            exit 1
          fi
          echo "Listing output directory after build..."
          ls -la out/${{ matrix.config.device }} || echo "Directory out/${{ matrix.config.device }} tidak ada"
          sudo ls -la /root/out/${{ matrix.config.device }} || echo "Directory /root/out/${{ matrix.config.device }} tidak ada"

      - name: Debug Output Directory
        if: always()
        run: |
          echo "Listing workspace contents: ${{ runner.workspace }}"
          ls -laR ${{ runner.workspace }}
          echo "Listing root directory contents..."
          sudo ls -laR /root

      - name: Find Firmware File
        id: find_file
        run: |
          SEARCH_PATHS=("${{ runner.workspace }}/out/${{ matrix.config.device }}" "/root/out/${{ matrix.config.device }}" "/tmp/out" "/root/tmp")
          FILE_PATH=""
          echo "Mencari file di: ${SEARCH_PATHS[@]}"
          for path in "${SEARCH_PATHS[@]}"; do
            if [ -d "$path" ]; then
              echo "Isi direktori $path:"
              sudo ls -la "$path"
              found_file=$(sudo find "$path" -maxdepth 1 -name "*.img*" -type f)
              if [ -n "$found_file" ]; then
                FILE_PATH=$found_file
                break
              fi
            else
              echo "Direktori $path tidak ada"
            fi
          done
          
          if [ -z "$FILE_PATH" ]; then
            echo "Error: File .img.gz atau .img tidak ditemukan di lokasi manapun."
            echo "Mencari semua file untuk debugging:"
            sudo find ${{ runner.workspace }}/out /root/out /tmp /root/tmp -type f 2>/dev/null || echo "Tidak ada file ditemukan"
            exit 1
          fi
          
          echo "FILE_PATH=$FILE_PATH" >> $GITHUB_ENV
          echo "File ditemukan di: $FILE_PATH"

      - name: Upload Firmware to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ env.FILE_PATH }}
          asset_name: ${{ matrix.config.device }}_${{ matrix.config.kernel }}_${{ matrix.rootfs }}.img.gz
          asset_content_type: application/gzip

  # JOB 3: Mempublikasikan rilis setelah semua build selesai dan diunggah
  publish_release:
    name: 3. Publish Release
    needs: [create_release, build_and_upload]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: success()
    steps:
      - name: Publish the release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ needs.create_release.outputs.release_tag }}
          draft: false
          prerelease: false
