name: ULO Autobuilder v2

on:
  workflow_dispatch:
    inputs:
      kernel:
        description: 'Kernel Version (ex. 6.6.6, 6.1.31-localversion, or "all" to build all compatible kernels)'
        required: true
        default: 'all'
        type: string
      rootfs:
        description: 'ROOTFS File (ex. ImmortalWrt-21.02.7-DBAI-armvirt-rootfs.tar.gz)'
        required: true
        default: 'ImmortalWrt-21.02.7-DBAI-armvirt-rootfs.tar.gz'
        type: string
      rootfs_size:
        description: 'ROOTFS Size, min 640 (756, 1024, 2048, etc)'
        required: true
        default: '1024'
        type: string
      fwinfo:
        description: 'Firmware Information'
        required: true
        default: 'release note'
        type: string

jobs:
  build_ipk:
    permissions:
      contents: write
    name: ULO Autobuilder
    runs-on: ubuntu-latest
    strategy:
      matrix:
        device:
          # Amlogic
          - s905x
          - s905x2
          - s905x3
          - s905x4
          # Allwinner
          - a64-bananapi-m64
          - a64-nanopi-a64
          - h313-x96q-lpddr3
          - h5-orangepi-pc2
          - h5-orangepi-prime
          - h5-orangepi-zeroplus
          - h5-orangepi-zeroplus2
          - h6-orangepi-1plus
          - h6-orangepi-3
          - h6-orangepi-3lts
          - h6-orangepi-lite2
          - h6-tanix-tx6
          - h616-orangepi-zero2
          - h616-x96-mate
          - h618-orangepi-zero2w
          - h618-orangepi-zero3
          # Rockchip
          - rk3566-orangepi-3b
          - rk3588-orangepi-5-max
          - rk3588-orangepi-5-plus
          - rk3588s-orangepi-5
    steps:
      - name: Cleanup and Installing Prerequisites
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get update
          sudo -E apt-get -y install jq lolcat build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev rsync unzip zlib1g-dev file wget aria2
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Cache ULO repository
        uses: actions/cache@v4
        with:
          path: |
            core/
            rootfs/
            device/
          key: ${{ runner.os }}-ulo-repo-${{ hashFiles('ulo') }}

      - name: Download ULO Repository
        run: |
          if [ ! -d "core/kernel" ] || [ -z "$(ls -A core/kernel)" ]; then
            echo "Downloading ULO repository..."
            aria2c --max-tries=3 --retry-wait=5 --out=tmp/data.zip "https://codeload.github.com/armarchindo/ULO-repository/zip/refs/heads/main"
            unzip -q tmp/data.zip -d tmp
            cp -rf tmp/ULO-repository-main/kernel core/
            cp -rf tmp/ULO-repository-main/rootfs rootfs/
            cp -rf tmp/ULO-repository-main/firmware core/root/lib/
            rm -rf tmp
          else
            echo "Using cached ULO repository..."
          fi
          ls -la core/kernel/
          ls -la rootfs/

      - name: Ensure ROOTFS File Exists
        run: |
          if [ ! -f "rootfs/${{ inputs.rootfs }}" ]; then
            echo "Downloading ROOTFS ${{ inputs.rootfs }}..."
            aria2c --max-tries=3 --retry-wait=5 --out=rootfs/${{ inputs.rootfs }} \
              "https://github.com/armarchindo/rootfs-openwrt/releases/download/rootfs_insomwrt/${{ inputs.rootfs }}" || \
              echo "Failed to download ROOTFS ${{ inputs.rootfs }}. Continuing..."
          fi
          ls -la rootfs/

      - name: Find Compatible Kernels
        id: find_kernels
        run: |
          # Define SOC based on device
          if [[ "${{ matrix.device }}" == *"s905"* ]]; then
            soc="amlogic"
          elif [[ "${{ matrix.device }}" == *"a64-"* || "${{ matrix.device }}" == *"h313-"* || "${{ matrix.device }}" == *"h5-"* || "${{ matrix.device }}" == *"h6-"* || "${{ matrix.device }}" == *"h616-"* || "${{ matrix.device }}" == *"h618-"* ]]; then
            soc="allwinner"
          elif [[ "${{ matrix.device }}" == *"rk"* ]]; then
            soc="rockchip"
          else
            soc="unknown"
          fi
          # Find kernels matching SOC
          kernels=$(ls core/kernel/ | grep dtb-${soc} | cut -d- -f3- | cut -d. -f1 | sort | uniq || echo "none")
          if [ "$kernels" = "none" ]; then
            echo "No compatible kernels found for ${{ matrix.device }} (SOC: $soc)"
            echo "kernels=none" >> $GITHUB_OUTPUT
          else
            echo "Compatible kernels for ${{ matrix.device }}: $kernels"
            echo "kernels=$kernels" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Building OpenWrt
        run: |
          echo "Checking ULO repository availability..."
          curl -I https://codeload.github.com/armarchindo/ULO-repository/zip/refs/heads/main
          # Validate device directory
          if [ ! -f "device/${{ matrix.device }}/boot-*.tar.gz" ]; then
            echo "No boot files found for device ${{ matrix.device }}. Skipping..."
            exit 0
          fi
          # If kernel input is 'all', build for all compatible kernels; otherwise, use specified kernel
          if [ "${{ inputs.kernel }}" = "all" ]; then
            for kernel in ${{ steps.find_kernels.outputs.kernels }}; do
              if [ "$kernel" != "none" ]; then
                echo "Building for device ${{ matrix.device }} with kernel $kernel..."
                sudo ./ulo -m ${{ matrix.device }} -r ${{ inputs.rootfs }} -k $kernel -s ${{ inputs.rootfs_size }} || \
                (echo "Kernel $kernel not compatible with ${{ matrix.device }} or failed. Skipping..." && true)
              else
                echo "No kernels available for ${{ matrix.device }}. Skipping..."
              fi
            done
          else
            echo "Building for device ${{ matrix.device }} with kernel ${{ inputs.kernel }}..."
            sudo ./ulo -m ${{ matrix.device }} -r ${{ inputs.rootfs }} -k ${{ inputs.kernel }} -s ${{ inputs.rootfs_size }} || \
            (echo "Kernel ${{ inputs.kernel }} not compatible with ${{ matrix.device }} or failed. Skipping..." && true)
          fi
          echo "Build completed or failed. Checking output directory..."
          ls -la ./out/ || echo "No output directory created."
        continue-on-error: true

      - name: Creating Package Artifact
        if: success() || failure()
        run: |
          mkdir -p ./artifact/${{ matrix.device }}
          cp -rf ./out/${{ matrix.device }}/* ./artifact/${{ matrix.device }}/ || true
          ls -la ./artifact/${{ matrix.device }} || echo "No artifacts for ${{ matrix.device }}."

      - name: Delivering Package
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: openwrt_package_${{ matrix.device }}
          path: ./artifact/${{ matrix.device }}/*

  upload_release:
    needs: build_ipk
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Set Release Date
        id: set_date
        run: echo "date=$(date +%Y%m%d)" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Combine artifacts
        run: |
          mkdir -p combined_artifact
          for device in s905x s905x2 s905x3 s905x4 a64-bananapi-m64 a64-nanopi-a64 h313-x96q-lpddr3 h5-orangepi-pc2 h5-orangepi-prime h5-orangepi-zeroplus h5-orangepi-zeroplus2 h6-orangepi-1plus h6-orangepi-3 h6-orangepi-3lts h6-orangepi-lite2 h6-tanix-tx6 h616-orangepi-zero2 h616-x96-mate h618-orangepi-zero2w h618-orangepi-zero3 rk3566-orangepi-3b rk3588-orangepi-5-max rk3588-orangepi-5-plus rk3588s-orangepi-5; do
            cp -rf artifacts/openwrt_package_${device}/* combined_artifact/ || true
          done
          ls -la combined_artifact/ || echo "No artifacts to combine."

      - name: Upload release asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: combined_artifact/*
          tag: ULO-RELEASE_${{ steps.set_date.outputs.date }}
          file_glob: true
          overwrite: true
          body: |
            ## OpenWrt ULO Release (${{ steps.set_date.outputs.date }})
            ULO-Builder Release from Github Workflow
            ### OpenWrt Image Information
            - Kernel version: ${{ inputs.kernel }}
            - ROOTFS File: ${{ inputs.rootfs }}
            - ROOTFS Size: ${{ inputs.rootfs_size }}
            - Firmware Information: ${{ inputs.fwinfo }}
            - Devices included: s905x, s905x2, s905x3, s905x4, a64-bananapi-m64, a64-nanopi-a64, h313-x96q-lpddr3, h5-orangepi-pc2, h5-orangepi-prime, h5-orangepi-zeroplus, h5-orangepi-zeroplus2, h6-orangepi-1plus, h6-orangepi-3, h6-orangepi-3lts, h6-orangepi-lite2, h6-tanix-tx6, h616-orangepi-zero2, h616-x96-mate, h618-orangepi-zero2w, h618-orangepi-zero3, rk3566-orangepi-3b, rk3588-orangepi-5-max, rk3588-orangepi-5-plus, rk3588s-orangepi-5
