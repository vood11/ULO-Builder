name: ULO Autobuilder v2 (Final, Robust)

on:
  workflow_dispatch:
    inputs:
      rootfs_size:
        description: 'Ukuran ROOTFS, minimal 640 (756, 1024, 2048, dll)'
        required: true
        default: '1024'
        type: string
      fwinfo:
        description: 'Informasi Firmware'
        required: true
        default: 'catatan rilis'
        type: string

jobs:
  # JOB 1: Membuat Draf Rilis
  create_release:
    name: 1. Create Draft Release
    runs-on: ubuntu-latest
    permissions:
      contents: write 
    outputs:
      upload_url: ${{ steps.create_release_step.outputs.upload_url }}
      release_tag: ${{ steps.get_date.outputs.release_tag }}
    steps:
      - name: Checkout Repositori
        uses: actions/checkout@v4

      - name: Dapatkan Tanggal dan Buat Tag
        id: get_date
        run: |
          export TZ="Asia/Jakarta"
          bulan=$(date +%B)
          tanggal=$(date +%d)
          tahun=$(date +%Y)
          echo "release_tag=ULO-RELEASE_${bulan}-${tanggal}-${tahun}" >> $GITHUB_OUTPUT

      - name: Create Draft Release via GH CLI
        id: create_release_step
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_TAG="${{ steps.get_date.outputs.release_tag }}"
          RELEASE_BODY=$(cat <<EOF
          ## Rilis OpenWrt untuk Berbagai Perangkat SBC dan STB
          Firmware ini dibuild menggunakan Github Actions
          ### Informasi Firmware OpenWrt
          - Ukuran ROOTFS: ${{ inputs.rootfs_size }}
          - Informasi Firmware: ${{ inputs.fwinfo }}
          EOF
          )
          
          gh release create "$RELEASE_TAG" --draft --title "Rilis ULO Autobuild | $RELEASE_TAG" --notes "$RELEASE_BODY"
          
          UPLOAD_URL=$(gh release view "$RELEASE_TAG" --json uploadUrl -q .uploadUrl)
          echo "upload_url=$UPLOAD_URL" >> $GITHUB_OUTPUT

  # JOB 2: Membangun firmware dengan metode pencarian global yang andal
  build_and_upload:
    name: 2. Build, Find, and Upload Firmware
    needs: create_release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        config:
          # --- SoC: Amlogic ---
          - { device: s905x, kernel: '6.1.66-DBAI' }
        rootfs:
          - 'ImmortalWrt-21.02.7-DBAI-armvirt-rootfs.tar.gz'
          - 'OpenWrt-23.05.4-A2OS-armsr-armv8-generic-rootfs.tar.gz'
    steps:
      - name: Pembersihan dan Instalasi Prasyarat
        run: |
          sudo -E apt-get update
          sudo -E apt-get -y install git
      - name: Checkout Repositori
        uses: actions/checkout@v4
      - name: Patching ULO
        run: |
          if [ -f ./.github/workflows/ULO_Workflow.patch ]; then
            mv ./.github/workflows/ULO_Workflow.patch ./ULO_Workflow.patch
            patch -p1 < ./ULO_Workflow.patch
          fi
      
      - name: Build, Find, and Relocate Firmware
        id: build_and_find
        run: |
          # 1. Jalankan proses build dengan sudo
          sudo ./ulo -y -m ${{ matrix.config.device }} -r ${{ matrix.rootfs }} -k ${{ matrix.config.kernel }} -s ${{ inputs.rootfs_size }}

          echo "Build selesai. Mencari file output di seluruh sistem..."
          
          # 2. Cari file .img.gz yang baru dibuat (dalam 15 menit terakhir)
          FOUND_FILE=$(sudo find / -name "*.img.gz" -type f -newermt "-15 minutes" 2>/dev/null | head -n 1)
          
          if [ -z "$FOUND_FILE" ]; then
            echo "FATAL ERROR: Tidak ada file .img.gz yang ditemukan setelah proses build selesai."
            exit 1
          fi

          # 3. Buat direktori tujuan yang pasti di dalam workspace
          DEST_DIR="${{ runner.workspace }}/firmware_output"
          mkdir -p "$DEST_DIR"

          # 4. Pindahkan file yang ditemukan ke direktori tujuan
          sudo mv "$FOUND_FILE" "$DEST_DIR/"
          
          # 5. Dapatkan nama file saja
          FILENAME=$(basename "$FOUND_FILE")
          
          # 6. Kembalikan kepemilikan file ke user 'runner'
          sudo chown runner:docker "$DEST_DIR/$FILENAME"

          # 7. Simpan path BARU yang sudah pasti ini ke environment
          FINAL_PATH="$DEST_DIR/$FILENAME"
          echo "FILE_PATH=$FINAL_PATH" >> $GITHUB_ENV
          echo "SUKSES: File dipindahkan ke $FINAL_PATH"

      - name: Upload Firmware to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ env.FILE_PATH }}
          asset_name: ${{ matrix.config.device }}_${{ matrix.config.kernel }}_${{ matrix.rootfs }}.img.gz
          asset_content_type: application/gzip

  # JOB 3: Mempublikasikan rilis
  publish_release:
    name: 3. Publish Release
    needs: [create_release, build_and_upload]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: success()
    steps:
      - name: Checkout Repositori
        uses: actions/checkout@v4
        
      - name: Publish the release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release edit ${{ needs.create_release.outputs.release_tag }} --draft=false
